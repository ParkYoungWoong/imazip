{"version":3,"sources":["../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/typeof.js","../../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","../../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","../../node_modules/@babel/runtime/regenerator/index.js","../../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../imazip.js","index.js"],"names":["compressImage","options","img","document","createElement","format","src","onload","mimeType","test","canvas","adjustedSize","adjustSize","naturalWidth","naturalHeight","maxSize","width","height","getContext","drawImage","callback","origin","toDataURL","quality","thumbnail","makeThumbnail","opts","imazip","Promise","resolve","reject","console","log","calcImage","then","image"],"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","file":"test.e31bb0bc.map","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function compressImage (options) {\n  const img = document.createElement('img');\n  const format = options.format;\n\n  img.src = options.src\n  img.onload = () => {\n    let mimeType\n\n    if (/image\\//.test(format)) {\n      mimeType = format\n    } else {\n      switch (format) {\n        case 'png':\n          mimeType = 'image/png'\n          break\n        case 'webp':\n          mimeType = 'image/webp'\n          break\n        default:\n          // jpg, jpeg, etc..\n          mimeType = 'image/jpeg'\n      }\n    }\n\n    const canvas = document.createElement('canvas')\n    const adjustedSize = adjustSize(img.naturalWidth, img.naturalHeight, (options.maxSize || 1920))\n    canvas.width = adjustedSize.width\n    canvas.height = adjustedSize.height\n    // canvas.width = img.naturalWidth\n    // canvas.height = img.naturalHeight\n    canvas\n      .getContext(\"2d\")\n      .drawImage(img, 0, 0, adjustedSize.width, adjustedSize.height)\n\n    callback({\n      origin: canvas.toDataURL(mimeType, options.quality / 100),\n      thumbnail: makeThumbnail(img, mimeType, options)\n    })\n  }\n}\n\n\nlet opts = {};\n\nfunction imazip(options) {\n  return new Promise(async (resolve, reject) => {\n    opts = options;\n    resolve(opts.width + 200);\n  });\n}\n\nexport default imazip;\n// export { imazip, imazip as default };","import imazip from '../src/prod/imazip';\n\nconsole.log('~~hahaha~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~``');\n\nasync function calcImage() {\n  imazip({\n    width: 100\n  })\n    .then(image => {\n      console.log(image)\n    })\n}\n\ncalcImage();\n"]}